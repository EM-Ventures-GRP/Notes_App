# -*- coding: utf-8 -*-
"""Notes_App V2.8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Z2Hsv0DVSzN8gwB-qths7kqk4zByo7VR
"""

from os import remove
import json
from typing import Dict, List
import re

NotesDict = Dict[str, List[str]]

# ------------------------------
# Helpers
# ------------------------------
def show_menu():
    print("\nNotes v2.7")
    print("1) Add note")
    print("2) Show notes")
    print("3) Delete note")
    print("4) Search notes")
    print("5) Move note")
    print("6) Save & Exit")


def load_notes(path: str = "notes.json") -> NotesDict:
    """
    Return notes as {category: [notes...]}.
    Handle:
      - Missing file
      - Corrupt JSON
      - Migration from old list -> {"General": [...]}
    """
    try:
        with open(path, "r", encoding="utf-8") as f:
            data = json.load(f)
    except FileNotFoundError:
        return {}
    except json.JSONDecodeError:
        print("Warning: notes file corrupted or empty. Starting fresh.")
        return {}

    if isinstance(data, list):
        return {"General": [str(x) for x in data]}
    if isinstance(data, dict):
        fixed: NotesDict = {}
        for k, v in data.items():
            if isinstance(v, list):
                fixed[str(k)] = [str(x) for x in v]
            else:
                fixed[str(k)] = [str(v)]
        return fixed

    return {}

def save_notes(notes: NotesDict, path: str = "notes.json") -> None:
    """Save notes as JSON"""
    # Ensure valid dict-of-lists
    to_write = {}
    for k, v in notes.items():
        if isinstance(v, list):
            to_write[str(k)] = [str(x) for x in v]
        else:
            to_write[str(k)] = [str(v)]
    with open(path, "w", encoding="utf-8") as f:
        json.dump(to_write, f, indent=2, ensure_ascii=False)

def add_note(notes: NotesDict, text: str, category: str = "General") -> None:
    category = (category or "General").strip() or "General"
    text = text.strip()
    if not text:
        print("Empty note, cancelled.")
        return
    notes.setdefault(category, []).append(text)

def show_notes_grouped(notes: NotesDict) -> None:
    """Show grouped notes (nested loop here)"""
    if not notes:
        print("No notes yet.")
        return

    for cat in sorted(notes.keys(), key=str.lower):
        print(f"== {cat} ==")
        for i, note in enumerate(sorted(notes[cat], key=str.lower), start=1):
            print(f"{i}. {note}")
        print()


def delete_note(notes: NotesDict, category: str, idx_one_based: int):
    """Delete note by category + index"""
    try:
        idx = idx_one_based - 1
        cat_list = notes[category]
        removed = cat_list.pop(idx)
        if not cat_list:
            del notes[category]
        return removed
    except KeyError:
        print("No such category")
        return None
    except IndexError:
        print("That number doesn't exist in this category")
        return None

def search_notes(notes: NotesDict, term: str) -> None:
    term = term.strip()
    if not term:
        print("Empty search.")
        return

    # Compile regex for case-insensitive search
    pattern = re.compile(re.escape(term), re.IGNORECASE)
    found = False

    for cat, items in notes.items():            # outer loop
        for i, note in enumerate(items, 1):     # inner loop
            if pattern.search(note):
               highlighted = pattern.sub(lambda m:f"[{m.group(0)}]", note)
               print(f"found in {cat}: {i}. {highlighted}")
               found = True

    if not found:
        print("No results.")


def move_note(notes: NotesDict, from_cat: str, idx_one_based: int, to_cat: str) -> str | None:
    """
    Move note from `from_cat` at 1-based index to `to_cat`.
    Returns the moved note text on success, else None.
    """
    try:
        idx = idx_one_based -1
        src_list = notes[from_cat]
        note = src_list.pop(idx)

        if not src_list:
            del notes[from_cat]

        notes.setdefault(to_cat.strip() or "General",[]).append(note)
        return None

    except KeyError:
        print("No such source category")
        return None
    except IndexError:
        print("That number doesn't exist in the source category")
    return None


# ------------------------------
# Main loop
# ------------------------------

def main():
    notes = load_notes()

    while True:
      show_menu()
      choice = input(">").strip()


      if choice == "1":
            text = input("Add a note: ").strip()
            cat  = input("Category (default: General): ").strip() or "General"
            add_note(notes, text, cat)

      elif choice == "2":
            show_notes_grouped(notes)

      elif choice == "3":
            if not notes:
                print("No notes yet.")
                continue
            show_notes_grouped(notes)
            cat = input("Category to delete from: ").strip()
            if cat not in notes:
                print("No such category.")
                continue
            try:
                idx = int(input("Number to delete (shown on the left): "))
            except ValueError:
                print("Please type a number like 1 or 2.")
                continue
            removed = delete_note(notes, cat, idx)
            if removed is not None:
                print(f"Removed: {removed}")

      elif choice == "4":
            term = input("search for note:").strip()
            search_notes(notes, term)

      elif choice == "5":
            if not notes:
                print("(no notes yet)")
                continue
            show_notes_grouped(notes)
            from_cat = input("Move FROM category: ").strip()
            if from_cat not in notes:
                print("No such category.")
                continue
            try:
                idx = int(input("Number to move (shown on the left): "))
            except ValueError:
                print("Please type a number like 1 or 2.")
                continue
            to_cat = input("Move TO category (default: General): ").strip() or "General"
            moved = move_note(notes, from_cat, idx, to_cat)
            if moved is not None:
                print(f"Moved: {moved!r} â†’ {to_cat}")

      elif choice == "6":
            save_notes(notes)
            print("Saved. Bye!")
            break
      else:
            print("Choose 1-6.")

if __name__ == "__main__":
 main()

